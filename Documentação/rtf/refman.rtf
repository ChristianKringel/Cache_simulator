{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs16\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s6\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs12\cgrid \sbasedon0 \snext0 heading 6;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\*\listtable
{\list\listtemplateid1
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8662 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid1}
{\list\listtemplateid2
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid2}
{\list\listtemplateid3
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid3}
}
{\listoverridetable
{\listoverride\listid1\listoverridecount0\ls1}
{\listoverride\listid2\listoverridecount0\ls2}
{\listoverride\listid3\listoverridecount0\ls3}
}
{\info 
{\title {\comment Simulador de Cache }Simulador de Cache}
{\comment Gerado por doxygen 1.12.0.}
}\pard\plain 
\sectd\pgnlcrm
{\footer \s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid {\chpgn}}
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
\vertalc\qc\par\par\par\par\par\par\par
\pard\plain \s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid 
{\field\fldedit {\*\fldinst TITLE \\*MERGEFORMAT}{\fldrslt Simulador de Cache}}\par
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
\par
\par\par\par\par\par\par\par\par\par\par\par\par
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
{\field\fldedit {\*\fldinst AUTHOR \\*MERGEFORMAT}{\fldrslt AUTHOR}}\par
Vers\'E3o \par\page\page\vertalt
\pard\plain 
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid Sum\'E1rio\par
\pard\plain \par
{\field\fldedit {\*\fldinst TOC \\f \\*MERGEFORMAT}{\fldrslt Table of contents}}\par
\pard\plain 
\sect \sbkpage \pgndec \pgnrestart
\sect \sectd \sbknone
{\footer \s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid {\chpgn}}
\par \pard\plain 
\par \pard\plain 
\pard\plain \s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Cache Simulator\par \pard\plain 
{\tc\tcl1 \v Cache Simulator}
{\xe \v Cache Simulator}
{\bkmkstart AAAAAAAABE}
{\bkmkend AAAAAAAABE}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\bkmkstart AAAAAAAABF}
{\bkmkend AAAAAAAABF}
\par
Este projeto \'E9 um simulador de cache que permite a simula\'E7\'E3o de diferentes configura\'E7\'F5es de cache, utilizando par\'E2metros como n\'FAmero de conjuntos, tamanho de bloco, associatividade, pol\'EDtica de substitui\'E7\'E3o, e um arquivo de entrada para simula\'E7\'E3o.\par
{\bkmkstart AAAAAAAABG}
{\bkmkend AAAAAAAABG}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Features
\par}
{\tc\tcl2 \v Features}
Este simulador permite os tr\'EAs tipos mais utilizados de substitui\'E7\'E3o, sendo eles:{
\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
{\f2 LRU} : Troca o bloco utilizado a mais tempo (Last Recent Used)\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
{\f2 FIFO} : Troca o bloco inserido primeiro, conforme uma fila (First In First Out)\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
{\f2 RANDOM} : Este algoritmo \'E9 aleat\'F3rio, e troca de forma aleat\'F3ria o bloco, podendo alterar a cada execu\'E7\'E3o diferente\par}
\par
\par}
{\bkmkstart AAAAAAAABH}
{\bkmkend AAAAAAAABH}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Estrutura do Projeto
\par}
{\tc\tcl2 \v Estrutura do Projeto}
{
\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
{\f2 {\b cache.h}} : Cont\'E9m as defini\'E7\'F5es de structs e declara\'E7\'F5es de fun\'E7\'F5es.\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
{\f2 {\b cache.c}} : Implementa\'E7\'E3o das fun\'E7\'F5es relacionadas \'E0 cache.\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
{\f2 {\b cache_simulator.c}} : C\'F3digo principal que executa o simulador (\'E9 nosso main).\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
{\f2 Makefile} : Um arquivo opcional para facilitar a compila\'E7\'E3o do projeto.\par}
\par
\par}
{\bkmkstart AAAAAAAABI}
{\bkmkend AAAAAAAABI}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Compila\'E7\'E3o
\par}
{\tc\tcl2 \v Compila\'E7\'E3o}
Para compilar o projeto, utilize o seguinte comando no terminal:\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid gcc -o cache_simulator cache_simulator.c cache.c -lm\par
}
 Caso seja usado o Makefile simplesmente rodar o comando {
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid make\par
}
\par}
{\bkmkstart AAAAAAAABJ}
{\bkmkend AAAAAAAABJ}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Execu\'E7\'E3o
\par}
{\tc\tcl2 \v Execu\'E7\'E3o}
Para executar o c\'F3digo no linux use algo deste tipo:{
\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
{\f2 ./cache_simulator <nsets> <bsize> <assoc> <substitui\'E7\'E3o> <flag_saida> arquivo_de_entrada} \par}
\par
\par
Para executar o c\'F3digo no Windows use algo assim:{
\par
\pard\plain {\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af0\langfe2052\dbch\af0\afs24\lang1081\loch\f0\fs24\lang1033{\listtext\pard\plain \hich\af3\dbch\af3\loch\f8 \'01\u8226\tab}\ilvl0\ls1 \li0\ri0\lin0\rin0\fi-360\tx360\li360\ri0\lin360\rin0\fi-360\kerning1\hich\af4\dbch\af5\rtlch \ltrch\loch\fs20
{\f2 .\\cache_simulator <nsets> <bsize> <assoc> <substitui\'E7\'E3o> <flag_saida> arquivo_de_entrada} \par}
\par
\par}
{\bkmkstart AAAAAAAABK}
{\bkmkend AAAAAAAABK}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Arquivos de Benchmark
\par}
{\tc\tcl2 \v Arquivos de Benchmark}
Os arquivos de benchmark est\'E3o disponiveis dentro da pasta Benchmarks \par
 Utilize somente arquivos binarios para execu\'E7\'E3o.\par}
{\bkmkstart AAAAAAAABL}
{\bkmkend AAAAAAAABL}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Autores
\par}
{\tc\tcl2 \v Autores}
{\f2 Christian Kringel} \par
{\f2 Pedro Ravazolo} \par}
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
\'CDndice das Estruturas de Dados\par \pard\plain 
{\tc \v \'CDndice das Estruturas de Dados}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Estruturas de Dados\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Aqui est\'E3o as estruturas de dados, uni\'F5es e suas respectivas descri\'E7\'F5es:}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b {\b Cache} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b CacheBlock} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b CacheSet} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b CacheStats} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
\'CDndice dos Arquivos\par \pard\plain 
{\tc \v \'CDndice dos Arquivos}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Lista de Arquivos\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Esta \'E9 a lista de todos os arquivos e suas respectivas descri\'E7\'F5es:}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b {\b cache.c} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b cache.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAO \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b cache_simulator.c} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Estruturas{\tc \v Estruturas}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia da Estrutura Cache\par \pard\plain 
{\tc\tcl2 \v Cache}
{\xe \v Cache}
{\bkmkstart AAAAAAAABM}
{\bkmkend AAAAAAAABM}
\par
{
{\f2 #include <cache.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Campos de Dados\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b CacheSet} * {\b sets}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b numSets}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b blockSize}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b associativity}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b CacheStats} {\b stats}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int(* {\b replacementPolicy} )({\b CacheSet} *set, int {\b associativity})\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Campos\par
\pard\plain 
{\xe \v associativity\:Cache}
{\xe \v Cache\:associativity}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int associativity}}
\par
{\bkmkstart AAAAAAAABN}
{\bkmkend AAAAAAAABN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v blockSize\:Cache}
{\xe \v Cache\:blockSize}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int blockSize}}
\par
{\bkmkstart AAAAAAAABO}
{\bkmkend AAAAAAAABO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v numSets\:Cache}
{\xe \v Cache\:numSets}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int numSets}}
\par
{\bkmkstart AAAAAAAABP}
{\bkmkend AAAAAAAABP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v replacementPolicy\:Cache}
{\xe \v Cache\:replacementPolicy}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int(* replacementPolicy) ({\b CacheSet} *set, int {\b associativity})}}
\par
{\bkmkstart AAAAAAAABQ}
{\bkmkend AAAAAAAABQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v sets\:Cache}
{\xe \v Cache\:sets}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b CacheSet}* sets}}
\par
{\bkmkstart AAAAAAAABR}
{\bkmkend AAAAAAAABR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v stats\:Cache}
{\xe \v Cache\:stats}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b CacheStats} stats}}
\par
{\bkmkstart AAAAAAAABS}
{\bkmkend AAAAAAAABS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa estrutura foi gerada a partir do seguinte arquivo:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b cache.h}}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia da Estrutura CacheBlock\par \pard\plain 
{\tc\tcl2 \v CacheBlock}
{\xe \v CacheBlock}
{\bkmkstart AAAAAAAABT}
{\bkmkend AAAAAAAABT}
\par
{
{\f2 #include <cache.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Campos de Dados\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b valid}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
uint32_t {\b tag}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b lastAccess}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b insertionTime}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Campos\par
\pard\plain 
{\xe \v insertionTime\:CacheBlock}
{\xe \v CacheBlock\:insertionTime}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int insertionTime}}
\par
{\bkmkstart AAAAAAAABU}
{\bkmkend AAAAAAAABU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v lastAccess\:CacheBlock}
{\xe \v CacheBlock\:lastAccess}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int lastAccess}}
\par
{\bkmkstart AAAAAAAABV}
{\bkmkend AAAAAAAABV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v tag\:CacheBlock}
{\xe \v CacheBlock\:tag}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
uint32_t tag}}
\par
{\bkmkstart AAAAAAAABW}
{\bkmkend AAAAAAAABW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v valid\:CacheBlock}
{\xe \v CacheBlock\:valid}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool valid}}
\par
{\bkmkstart AAAAAAAABX}
{\bkmkend AAAAAAAABX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa estrutura foi gerada a partir do seguinte arquivo:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b cache.h}}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia da Estrutura CacheSet\par \pard\plain 
{\tc\tcl2 \v CacheSet}
{\xe \v CacheSet}
{\bkmkstart AAAAAAAABY}
{\bkmkend AAAAAAAABY}
\par
{
{\f2 #include <cache.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Campos de Dados\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b CacheBlock} * {\b blocks}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b numBlocks}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Campos\par
\pard\plain 
{\xe \v blocks\:CacheSet}
{\xe \v CacheSet\:blocks}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b CacheBlock}* blocks}}
\par
{\bkmkstart AAAAAAAABZ}
{\bkmkend AAAAAAAABZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v numBlocks\:CacheSet}
{\xe \v CacheSet\:numBlocks}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int numBlocks}}
\par
{\bkmkstart AAAAAAAACA}
{\bkmkend AAAAAAAACA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa estrutura foi gerada a partir do seguinte arquivo:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b cache.h}}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia da Estrutura CacheStats\par \pard\plain 
{\tc\tcl2 \v CacheStats}
{\xe \v CacheStats}
{\bkmkstart AAAAAAAACB}
{\bkmkend AAAAAAAACB}
\par
{
{\f2 #include <cache.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Campos de Dados\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b hits}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b misses}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b compulsory}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b capacity}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b conflict}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b totalAccesses}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Campos\par
\pard\plain 
{\xe \v capacity\:CacheStats}
{\xe \v CacheStats\:capacity}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int capacity}}
\par
{\bkmkstart AAAAAAAACC}
{\bkmkend AAAAAAAACC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v compulsory\:CacheStats}
{\xe \v CacheStats\:compulsory}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int compulsory}}
\par
{\bkmkstart AAAAAAAACD}
{\bkmkend AAAAAAAACD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v conflict\:CacheStats}
{\xe \v CacheStats\:conflict}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int conflict}}
\par
{\bkmkstart AAAAAAAACE}
{\bkmkend AAAAAAAACE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v hits\:CacheStats}
{\xe \v CacheStats\:hits}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int hits}}
\par
{\bkmkstart AAAAAAAACF}
{\bkmkend AAAAAAAACF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v misses\:CacheStats}
{\xe \v CacheStats\:misses}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int misses}}
\par
{\bkmkstart AAAAAAAACG}
{\bkmkend AAAAAAAACG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v totalAccesses\:CacheStats}
{\xe \v CacheStats\:totalAccesses}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int totalAccesses}}
\par
{\bkmkstart AAAAAAAACH}
{\bkmkend AAAAAAAACH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
A documenta\'E7\'E3o para essa estrutura foi gerada a partir do seguinte arquivo:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b cache.h}}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Arquivos{\tc \v Arquivos}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Arquivo cache.c\par \pard\plain 
{\tc\tcl2 \v cache.c}
{\xe \v cache.c}
{\bkmkstart AAAAAAAAAB}
{\bkmkend AAAAAAAAAB}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "cache.h"}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Fun\'E7\'F5es\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Cache} * {\b createCacheWithPolicy} (int numSets, int blockSize, int associativity, char policyChar)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freeCache} ({\b Cache} *cache)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b readFile} ({\b Cache} *cache, const char *filename)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b isHit} ({\b Cache} *cache, uint32_t tag, uint32_t index, int *emptySlot)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b handleCacheMiss} ({\b Cache} *cache, uint32_t tag, uint32_t index, int *emptySlot)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b processAddress} ({\b Cache} *cache, const uint32_t address)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b getLRUIndex} ({\b CacheSet} *set, int associativity)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b getFIFOIndex} ({\b CacheSet} *set, int associativity)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b getRandomIndex} ({\b CacheSet} *set, int associativity)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b printStats} ({\b Cache} *cache, int flag)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b isPowerOfTwo} (const unsigned int value)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b cacheIsFull} ({\b Cache} *cache)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Fun\'E7\'F5es\par
\pard\plain 
{\xe \v cacheIsFull\:cache.c}
{\xe \v cache.c\:cacheIsFull}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool cacheIsFull ({\b Cache} * cache)}}
\par
{\bkmkstart AAAAAAAAAC}
{\bkmkend AAAAAAAAAC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Func que percorre a cache pra ver se esta cheia \par
}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 288 \{\par
289     {\cf19 for} ({\cf18 int} i = 0; i < cache->numSets; i++) {\cf20 // percorre todos os conjuntos}\par
290     \{\par
291         {\cf19 for} ({\cf18 int} j = 0; j < cache->associativity; j++) {\cf20 // percorre todos os blocos de cada conjunto}\par
292         \{\par
293             {\cf19 if} (!cache->sets[i].blocks[j].valid) {\cf20 // se tiver algum bloco invalido, a cache nao esta cheia}\par
294                 {\cf19 return} {\cf17 false};\par
295             \par
296         \}\par
297     \}\par
298     {\cf19 return} {\cf17 true}; {\cf20 // se nao achou nenhum bloco invalido, entao todos sao validos, entao esta cheia}\par
299 \}\par
}
}
{\xe \v createCacheWithPolicy\:cache.c}
{\xe \v cache.c\:createCacheWithPolicy}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Cache} * createCacheWithPolicy (int numSets, int blockSize, int associativity, char policyChar)}}
\par
{\bkmkstart AAAAAAAAAD}
{\bkmkend AAAAAAAAAD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Funcao que inicializa toda a cache, conjuntos, etc Tambem seta as politicas de substituicao \par
}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 9 \{\par
10     Cache *cache = malloc({\cf17 sizeof}(Cache));\par
11     srand(time(NULL)); {\cf20 // Inicializa o gerador de n\'FAmeros aleat\'F3rios}\par
12     {\cf19 if} (cache == NULL)\par
13     \{\par
14         printf({\cf22 "ERRO: Falha na aloca\'E7\'E3o de mem\'F3ria para a cache\\n"});\par
15         {\cf19 return} NULL;\par
16     \}\par
17 \par
18     {\cf20 // seta os dados da cache na struct}\par
19     cache->numSets = numSets; \par
20     cache->blockSize = blockSize;\par
21     cache->associativity = associativity;\par
22     cache->sets = malloc(numSets * {\cf17 sizeof}(CacheSet));\par
23     {\cf19 if} (cache->sets == NULL)\par
24     \{\par
25         printf({\cf22 "ERRO: Falha na aloca\'E7\'E3o de mem\'F3ria para os conjuntos\\n"});\par
26         free(cache);\par
27         {\cf19 return} NULL;\par
28     \}\par
29 \par
30     {\cf19 for} ({\cf18 int} i = 0; i < numSets; i++)\par
31     \{   \par
32         cache->sets[i].blocks = malloc(associativity * {\cf17 sizeof}(CacheBlock)); {\cf20 // aloca os blocos de cada conjunto com base na associatividade}\par
33         cache->sets[i].numBlocks = associativity; {\cf20 // seta o numero de blocos}\par
34         {\cf19 if} (cache->sets[i].blocks == NULL)\par
35         \{\par
36             printf({\cf22 "ERRO: Falha na aloca\'E7\'E3o de mem\'F3ria para os blocos\\n"});\par
37             {\cf19 for} ({\cf18 int} j = 0; j < i; j++)\par
38             \{\par
39                 free(cache->sets[j].blocks);\par
40             \}\par
41             {\cf20 // se teve algum erro pra alocar os blocos, da free em tudo e retorna NULL}\par
42             free(cache->sets);\par
43             free(cache);\par
44             {\cf19 return} NULL;\par
45         \}\par
46         {\cf19 for} ({\cf18 int} j = 0; j < associativity; j++)\par
47         \{\par
48             {\cf20 // inicializa os blocos}\par
49             cache->sets[i].blocks[j].valid = {\cf17 false};\par
50             cache->sets[i].blocks[j].tag = 0;\par
51             cache->sets[i].blocks[j].lastAccess = 0;\par
52             cache->sets[i].blocks[j].insertionTime = 0;\par
53         \}\par
54     \}\par
55 \par
56     cache->stats = (CacheStats)\{0, 0, 0, 0, 0, 0\};\par
57 \par
58     {\cf19 switch} (policyChar)\par
59     \{\par
60     {\cf20 // ve qual a politica de substituicao e seta a funcao correspondente}\par
61     {\cf20 // faz uso do ponteiro pra funcao}\par
62     {\cf19 case} {\cf23 'L'}:\par
63         cache->replacementPolicy = getLRUIndex;\par
64         {\cf19 break};\par
65     {\cf19 case} {\cf23 'F'}:\par
66         cache->replacementPolicy = getFIFOIndex;\par
67         {\cf19 break};\par
68     {\cf19 case} {\cf23 'R'}:\par
69         cache->replacementPolicy = getRandomIndex;\par
70         {\cf19 break};\par
71     {\cf19 default}:\par
72         printf({\cf22 "ERRO: Pol\'EDtica de substitui\'E7\'E3o inv\'E1lida\\n"});\par
73         freeCache(cache);\par
74         {\cf19 return} NULL;\par
75     \}\par
76 \par
77     {\cf19 return} cache;\par
78 \}\par
}
}
{\xe \v freeCache\:cache.c}
{\xe \v cache.c\:freeCache}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void freeCache ({\b Cache} * cache)}}
\par
{\bkmkstart AAAAAAAAAE}
{\bkmkend AAAAAAAAAE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Func pra dar free na cache \par
}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 84 \{\par
85     {\cf19 if} (cache != NULL)\par
86     \{\par
87         {\cf19 for} ({\cf18 int} i = 0; i < cache->numSets; i++)\par
88         \{\par
89             free(cache->sets[i].blocks);\par
90         \}\par
91         free(cache->sets);\par
92         free(cache);\par
93     \}\par
94 \}\par
}
}
{\xe \v getFIFOIndex\:cache.c}
{\xe \v cache.c\:getFIFOIndex}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int getFIFOIndex ({\b CacheSet} * set, int associativity)}}
\par
{\bkmkstart AAAAAAAAAF}
{\bkmkend AAAAAAAAAF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Func pra calcular o indice pro FIFO \par
}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 225 \{\par
226     {\cf18 int} fifoIndex = 0;\par
227     {\cf18 int} oldestTime = set->blocks[0].insertionTime;\par
228 \par
229     {\cf19 for} ({\cf18 int} i = 1; i < associativity; i++)\par
230     \{\par
231         {\cf19 if} (!set->blocks[i].valid) {\cf20 // se tiver bloco invalido, retorna o indices}\par
232             {\cf19 return} i;\par
233 \par
234         {\cf19 if} (set->blocks[i].insertionTime < oldestTime) {\cf20 // se nao, ve qual o bloco mais antigo}\par
235         \{\par
236             oldestTime = set->blocks[i].insertionTime;\par
237             fifoIndex = i;\par
238         \}\par
239     \}\par
240 \par
241     {\cf19 return} fifoIndex; {\cf20 // retorna o indice do bloco mais antigo}\par
242 \}\par
}
}
{\xe \v getLRUIndex\:cache.c}
{\xe \v cache.c\:getLRUIndex}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int getLRUIndex ({\b CacheSet} * set, int associativity)}}
\par
{\bkmkstart AAAAAAAAAG}
{\bkmkend AAAAAAAAAG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Func pra calcular o indice pro LRU \par
}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 200 \{\par
201     {\cf18 int} lruIndex = 0;\par
202     {\cf18 int} oldestTime = set->blocks[0].lastAccess;\par
203 \par
204     {\cf19 for} ({\cf18 int} i = 1; i < associativity; i++)\par
205     \{\par
206         {\cf19 if} (!set->blocks[i].valid) {\cf20 // se tiver bloco invalido, retorna o indice }\par
207             {\cf19 return} i;\par
208 \par
209         {\cf19 if} (set->blocks[i].lastAccess < oldestTime) {\cf20 // se nao, ve qual o bloco usado mais antigamente}\par
210         \{\par
211             oldestTime = set->blocks[i].lastAccess; {\cf20 // atualiza o tempo}\par
212             lruIndex = i;                           {\cf20 // atualiza o indice}\par
213         \}\par
214     \}\par
215 \par
216     {\cf19 return} lruIndex; {\cf20 // retorna o indice do bloco menos usado }\par
217 \}\par
}
}
{\xe \v getRandomIndex\:cache.c}
{\xe \v cache.c\:getRandomIndex}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int getRandomIndex ({\b CacheSet} * set, int associativity)}}
\par
{\bkmkstart AAAAAAAAAH}
{\bkmkend AAAAAAAAAH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Func pra calcular o indice pro RANDOM \par
}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 248 \{ {\cf19 return} rand() % associativity; \}\par
}
}
{\xe \v handleCacheMiss\:cache.c}
{\xe \v cache.c\:handleCacheMiss}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void handleCacheMiss ({\b Cache} * cache, uint32_t tag, uint32_t index, int * emptySlot)}}
\par
{\bkmkstart AAAAAAAAAI}
{\bkmkend AAAAAAAAAI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Funcao que trata o miss \par
}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 144 \{\par
145     cache->stats.misses++;  {\cf20 // Incrementa o contador total de misses}\par
146 \par
147     CacheSet *set = &cache->sets[index]; {\cf20 // Pega o conjunto correspondente, com base no indice}\par
148     {\cf18 int} replaceIndex; {\cf20 // Indice do bloco que sera substituido}\par
149 \par
150     {\cf19 if} (*emptySlot != -1) {\cf20 // Se tiver um bloco invalido, usa ele (foi calculado no isHit)}\par
151     \{\par
152         replaceIndex = *emptySlot; {\cf20 // entao o bloco a ser substituido eh o bloco invalido}\par
153         cache->stats.compulsory++; {\cf20 // Incrementa o contador de misses compulsorios}\par
154     \}\par
155     {\cf19 else}\par
156     \{\par
157         replaceIndex = cache->replacementPolicy(set, cache->associativity); {\cf20 // Calcula o indice do bloco a ser substituido}\par
158 \par
159         {\cf19 if} (cacheIsFull(cache)) {\cf20 // Se a cache estiver cheia, eh um miss de capacidade}\par
160             cache->stats.capacity++;\par
161         {\cf19 else}                    {\cf20 // Se nao, eh um miss de conflito}\par
162             cache->stats.conflict++;\par
163     \}\par
164 \par
165     {\cf20 // Atualiza o bloco que sera substituido}\par
166     set->blocks[replaceIndex].valid = {\cf17 true};\par
167     set->blocks[replaceIndex].tag = tag;\par
168     set->blocks[replaceIndex].lastAccess = cache->stats.totalAccesses;\par
169     set->blocks[replaceIndex].insertionTime = cache->stats.totalAccesses;\par
170 \}\par
}
}
{\xe \v isHit\:cache.c}
{\xe \v cache.c\:isHit}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool isHit ({\b Cache} * cache, uint32_t tag, uint32_t index, int * emptySlot)}}
\par
{\bkmkstart AAAAAAAAAJ}
{\bkmkend AAAAAAAAAJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Funcao para testar se o endereco eh um hit Retorna true caso seja, e false caso contrario \par
}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 123 \{\par
124     CacheSet *set = &cache->sets[index]; {\cf20 // Pega o conjunto correspondente, com base no indice}\par
125 \par
126     {\cf19 for} ({\cf18 int} i = 0; i < cache->associativity; i++)\par
127     \{\par
128         {\cf19 if} (set->blocks[i].valid && set->blocks[i].tag == tag) {\cf20 // compara pra ver se eh valido e a tag eh igual a tag calculada}\par
129         \{\par
130             set->blocks[i].lastAccess = cache->stats.totalAccesses; {\cf20 // Atualiza o tempo de acesso do bloco (LRU)}\par
131             {\cf19 return} {\cf17 true};                                            {\cf20 // Retorna true se for hit}\par
132         \}\par
133         {\cf19 if} (!set->blocks[i].valid && (*emptySlot) == -1)\par
134             *emptySlot = i;  {\cf20 // Atualiza o indice do bloco invalido}\par
135     \}\par
136 \par
137     {\cf19 return} {\cf17 false}; {\cf20 // Se nao achou nenhum bloco valido com a tag, entao nao eh hit}\par
138 \}\par
}
}
{\xe \v isPowerOfTwo\:cache.c}
{\xe \v cache.c\:isPowerOfTwo}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool isPowerOfTwo (const unsigned int value)}}
\par
{\bkmkstart AAAAAAAAAK}
{\bkmkend AAAAAAAAAK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
func pra ver se eh potencia de dois \par
}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 282 \{ {\cf19 return} (value != 0) && ((value & (value - 1)) == 0); \}\par
}
}
{\xe \v printStats\:cache.c}
{\xe \v cache.c\:printStats}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void printStats ({\b Cache} * cache, int flag)}}
\par
{\bkmkstart AAAAAAAAAL}
{\bkmkend AAAAAAAAAL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Func pra printar os stats conforme a flag \par
}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 254 \{\par
255     {\cf18 float} hitRate = (float)cache->stats.hits / cache->stats.totalAccesses;\par
256     {\cf18 float} missRate = (float)cache->stats.misses / cache->stats.totalAccesses;\par
257     {\cf18 float} compulsoryRate = (float)cache->stats.compulsory / cache->stats.misses;\par
258     {\cf18 float} capacityRate = (float)cache->stats.capacity / cache->stats.misses;\par
259     {\cf18 float} conflictRate = (float)cache->stats.conflict / cache->stats.misses;\par
260 \par
261     {\cf19 if} (flag == 0)\par
262     \{\par
263         printf({\cf22 "Total de acessos: %d\\n"}, cache->stats.totalAccesses);\par
264         printf({\cf22 "Total de hits: %d\\n"}, cache->stats.hits);\par
265         printf({\cf22 "Total de misses: %d\\n"}, cache->stats.misses);\par
266         printf({\cf22 "Taxa de hits: %.4f\\n"}, hitRate);\par
267         printf({\cf22 "Taxa de misses: %.4f\\n"}, missRate);\par
268         printf({\cf22 "Taxa de misses compuls\'F3rios: %.2f\\n"}, compulsoryRate);\par
269         printf({\cf22 "Taxa de misses de capacidade: %.2f\\n"}, capacityRate);\par
270         printf({\cf22 "Taxa de misses de conflito: %.2f\\n"}, conflictRate);\par
271     \}\par
272     {\cf19 else} {\cf19 if} (flag == 1)\par
273     \{\par
274         printf({\cf22 "%d %.4f %.4f %.2f %.2f %.2f\\n"}, cache->stats.totalAccesses, hitRate, missRate, compulsoryRate, capacityRate, conflictRate);\par
275     \}\par
276 \}\par
}
}
{\xe \v processAddress\:cache.c}
{\xe \v cache.c\:processAddress}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void processAddress ({\b Cache} * cache, const uint32_t address)}}
\par
{\bkmkstart AAAAAAAAAM}
{\bkmkend AAAAAAAAAM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Func que processa o endereco \par
}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 177 \{\par
178     {\cf20 // calculo dos bits de offset e index com log2}\par
179     {\cf18 int} offsetBits = log2(cache->blockSize);\par
180     {\cf18 int} indexBits = log2(cache->numSets);\par
181     {\cf20 // Calculo da tag com base no pseudo codigo fornecido}\par
182     uint32_t tag = address >> (offsetBits + indexBits);\par
183     uint32_t index = (address >> offsetBits) & ((1 << indexBits) - 1);\par
184 \par
185     {\cf18 bool} hit = {\cf17 false};\par
186     {\cf18 int} emptySlot = -1;\par
187 \par
188     {\cf19 if} (isHit(cache, tag, index, &emptySlot) ) {\cf20 // se for hit incrementa o contador dos hits}\par
189         cache->stats.hits++;\par
190     {\cf19 else} {\cf20 // se nao, trata a falta}\par
191         handleCacheMiss(cache, tag, index, &emptySlot);\par
192 \par
193     cache->stats.totalAccesses++; {\cf20 // incrementa o total de acessos}\par
194 \}\par
}
}
{\xe \v readFile\:cache.c}
{\xe \v cache.c\:readFile}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void readFile ({\b Cache} * cache, const char * filename)}}
\par
{\bkmkstart AAAAAAAAAN}
{\bkmkend AAAAAAAAAN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
le o arquivo e processa os enderecos \par
}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 100 \{\par
101     FILE *file = fopen(filename, {\cf22 "rb"});\par
102     {\cf19 if} (!file)\par
103     \{\par
104         printf({\cf22 "ERRO: N\'E3o foi poss\'EDvel abrir o arquivo %s\\n"}, filename);\par
105         {\cf19 return};\par
106     \}\par
107 \par
108     uint32_t address;\par
109     {\cf19 while} (fread(&address, {\cf17 sizeof}(uint32_t), 1, file) == 1)\par
110     \{\par
111         address = __builtin_bswap32(address); {\cf20 // converte para big endian}\par
112         processAddress(cache, address);       {\cf20 // processa o endereco}\par
113     \}\par
114 \par
115     fclose(file);\par
116 \}\par
}
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Arquivo cache.h\par \pard\plain 
{\tc\tcl2 \v cache.h}
{\xe \v cache.h}
{\bkmkstart AAAAAAAAAO}
{\bkmkend AAAAAAAAAO}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <stdio.h>}\par
{\f2 #include <stdbool.h>}\par
{\f2 #include <stdlib.h>}\par
{\f2 #include <time.h>}\par
{\f2 #include <string.h>}\par
{\f2 #include <math.h>}\par
{\f2 #include <stdint.h>}\par
{\f2 #include <ctype.h>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Estruturas de Dados\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b CacheBlock}\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b CacheSet}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b CacheStats}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
struct {\b Cache}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Fun\'E7\'F5es\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Cache} * {\b createCacheWithPolicy} (int numSets, int blockSize, int associativity, char policyChar)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b freeCache} ({\b Cache} *cache)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b processAddress} ({\b Cache} *cache, const uint32_t address)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b getLRUIndex} ({\b CacheSet} *set, int associativity)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b getFIFOIndex} ({\b CacheSet} *set, int associativity)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b getRandomIndex} ({\b CacheSet} *set, int associativity)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b readFile} ({\b Cache} *cache, const char *filename)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b printStats} ({\b Cache} *cache, const int flag)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b isPowerOfTwo} (unsigned int value)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b cacheIsFull} ({\b Cache} *cache)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b isHit} ({\b Cache} *cache, uint32_t tag, uint32_t index, int *emptySlot)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b handleCacheMiss} ({\b Cache} *cache, uint32_t tag, uint32_t index, int *emptySlot)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Fun\'E7\'F5es\par
\pard\plain 
{\xe \v cacheIsFull\:cache.h}
{\xe \v cache.h\:cacheIsFull}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool cacheIsFull ({\b Cache} * cache)}}
\par
{\bkmkstart AAAAAAAAAP}
{\bkmkend AAAAAAAAAP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Func que percorre a cache pra ver se esta cheia \par
}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 288 \{\par
289     {\cf19 for} ({\cf18 int} i = 0; i < cache->numSets; i++) {\cf20 // percorre todos os conjuntos}\par
290     \{\par
291         {\cf19 for} ({\cf18 int} j = 0; j < cache->associativity; j++) {\cf20 // percorre todos os blocos de cada conjunto}\par
292         \{\par
293             {\cf19 if} (!cache->sets[i].blocks[j].valid) {\cf20 // se tiver algum bloco invalido, a cache nao esta cheia}\par
294                 {\cf19 return} {\cf17 false};\par
295             \par
296         \}\par
297     \}\par
298     {\cf19 return} {\cf17 true}; {\cf20 // se nao achou nenhum bloco invalido, entao todos sao validos, entao esta cheia}\par
299 \}\par
}
}
{\xe \v createCacheWithPolicy\:cache.h}
{\xe \v cache.h\:createCacheWithPolicy}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Cache} * createCacheWithPolicy (int numSets, int blockSize, int associativity, char policyChar)}}
\par
{\bkmkstart AAAAAAAAAQ}
{\bkmkend AAAAAAAAAQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Funcao que inicializa toda a cache, conjuntos, etc Tambem seta as politicas de substituicao \par
}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 9 \{\par
10     Cache *cache = malloc({\cf17 sizeof}(Cache));\par
11     srand(time(NULL)); {\cf20 // Inicializa o gerador de n\'FAmeros aleat\'F3rios}\par
12     {\cf19 if} (cache == NULL)\par
13     \{\par
14         printf({\cf22 "ERRO: Falha na aloca\'E7\'E3o de mem\'F3ria para a cache\\n"});\par
15         {\cf19 return} NULL;\par
16     \}\par
17 \par
18     {\cf20 // seta os dados da cache na struct}\par
19     cache->numSets = numSets; \par
20     cache->blockSize = blockSize;\par
21     cache->associativity = associativity;\par
22     cache->sets = malloc(numSets * {\cf17 sizeof}(CacheSet));\par
23     {\cf19 if} (cache->sets == NULL)\par
24     \{\par
25         printf({\cf22 "ERRO: Falha na aloca\'E7\'E3o de mem\'F3ria para os conjuntos\\n"});\par
26         free(cache);\par
27         {\cf19 return} NULL;\par
28     \}\par
29 \par
30     {\cf19 for} ({\cf18 int} i = 0; i < numSets; i++)\par
31     \{   \par
32         cache->sets[i].blocks = malloc(associativity * {\cf17 sizeof}(CacheBlock)); {\cf20 // aloca os blocos de cada conjunto com base na associatividade}\par
33         cache->sets[i].numBlocks = associativity; {\cf20 // seta o numero de blocos}\par
34         {\cf19 if} (cache->sets[i].blocks == NULL)\par
35         \{\par
36             printf({\cf22 "ERRO: Falha na aloca\'E7\'E3o de mem\'F3ria para os blocos\\n"});\par
37             {\cf19 for} ({\cf18 int} j = 0; j < i; j++)\par
38             \{\par
39                 free(cache->sets[j].blocks);\par
40             \}\par
41             {\cf20 // se teve algum erro pra alocar os blocos, da free em tudo e retorna NULL}\par
42             free(cache->sets);\par
43             free(cache);\par
44             {\cf19 return} NULL;\par
45         \}\par
46         {\cf19 for} ({\cf18 int} j = 0; j < associativity; j++)\par
47         \{\par
48             {\cf20 // inicializa os blocos}\par
49             cache->sets[i].blocks[j].valid = {\cf17 false};\par
50             cache->sets[i].blocks[j].tag = 0;\par
51             cache->sets[i].blocks[j].lastAccess = 0;\par
52             cache->sets[i].blocks[j].insertionTime = 0;\par
53         \}\par
54     \}\par
55 \par
56     cache->stats = (CacheStats)\{0, 0, 0, 0, 0, 0\};\par
57 \par
58     {\cf19 switch} (policyChar)\par
59     \{\par
60     {\cf20 // ve qual a politica de substituicao e seta a funcao correspondente}\par
61     {\cf20 // faz uso do ponteiro pra funcao}\par
62     {\cf19 case} {\cf23 'L'}:\par
63         cache->replacementPolicy = getLRUIndex;\par
64         {\cf19 break};\par
65     {\cf19 case} {\cf23 'F'}:\par
66         cache->replacementPolicy = getFIFOIndex;\par
67         {\cf19 break};\par
68     {\cf19 case} {\cf23 'R'}:\par
69         cache->replacementPolicy = getRandomIndex;\par
70         {\cf19 break};\par
71     {\cf19 default}:\par
72         printf({\cf22 "ERRO: Pol\'EDtica de substitui\'E7\'E3o inv\'E1lida\\n"});\par
73         freeCache(cache);\par
74         {\cf19 return} NULL;\par
75     \}\par
76 \par
77     {\cf19 return} cache;\par
78 \}\par
}
}
{\xe \v freeCache\:cache.h}
{\xe \v cache.h\:freeCache}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void freeCache ({\b Cache} * cache)}}
\par
{\bkmkstart AAAAAAAAAR}
{\bkmkend AAAAAAAAAR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Func pra dar free na cache \par
}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 84 \{\par
85     {\cf19 if} (cache != NULL)\par
86     \{\par
87         {\cf19 for} ({\cf18 int} i = 0; i < cache->numSets; i++)\par
88         \{\par
89             free(cache->sets[i].blocks);\par
90         \}\par
91         free(cache->sets);\par
92         free(cache);\par
93     \}\par
94 \}\par
}
}
{\xe \v getFIFOIndex\:cache.h}
{\xe \v cache.h\:getFIFOIndex}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int getFIFOIndex ({\b CacheSet} * set, int associativity)}}
\par
{\bkmkstart AAAAAAAAAS}
{\bkmkend AAAAAAAAAS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Func pra calcular o indice pro FIFO \par
}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 225 \{\par
226     {\cf18 int} fifoIndex = 0;\par
227     {\cf18 int} oldestTime = set->blocks[0].insertionTime;\par
228 \par
229     {\cf19 for} ({\cf18 int} i = 1; i < associativity; i++)\par
230     \{\par
231         {\cf19 if} (!set->blocks[i].valid) {\cf20 // se tiver bloco invalido, retorna o indices}\par
232             {\cf19 return} i;\par
233 \par
234         {\cf19 if} (set->blocks[i].insertionTime < oldestTime) {\cf20 // se nao, ve qual o bloco mais antigo}\par
235         \{\par
236             oldestTime = set->blocks[i].insertionTime;\par
237             fifoIndex = i;\par
238         \}\par
239     \}\par
240 \par
241     {\cf19 return} fifoIndex; {\cf20 // retorna o indice do bloco mais antigo}\par
242 \}\par
}
}
{\xe \v getLRUIndex\:cache.h}
{\xe \v cache.h\:getLRUIndex}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int getLRUIndex ({\b CacheSet} * set, int associativity)}}
\par
{\bkmkstart AAAAAAAAAT}
{\bkmkend AAAAAAAAAT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Func pra calcular o indice pro LRU \par
}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 200 \{\par
201     {\cf18 int} lruIndex = 0;\par
202     {\cf18 int} oldestTime = set->blocks[0].lastAccess;\par
203 \par
204     {\cf19 for} ({\cf18 int} i = 1; i < associativity; i++)\par
205     \{\par
206         {\cf19 if} (!set->blocks[i].valid) {\cf20 // se tiver bloco invalido, retorna o indice }\par
207             {\cf19 return} i;\par
208 \par
209         {\cf19 if} (set->blocks[i].lastAccess < oldestTime) {\cf20 // se nao, ve qual o bloco usado mais antigamente}\par
210         \{\par
211             oldestTime = set->blocks[i].lastAccess; {\cf20 // atualiza o tempo}\par
212             lruIndex = i;                           {\cf20 // atualiza o indice}\par
213         \}\par
214     \}\par
215 \par
216     {\cf19 return} lruIndex; {\cf20 // retorna o indice do bloco menos usado }\par
217 \}\par
}
}
{\xe \v getRandomIndex\:cache.h}
{\xe \v cache.h\:getRandomIndex}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int getRandomIndex ({\b CacheSet} * set, int associativity)}}
\par
{\bkmkstart AAAAAAAAAU}
{\bkmkend AAAAAAAAAU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Func pra calcular o indice pro RANDOM \par
}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 248 \{ {\cf19 return} rand() % associativity; \}\par
}
}
{\xe \v handleCacheMiss\:cache.h}
{\xe \v cache.h\:handleCacheMiss}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void handleCacheMiss ({\b Cache} * cache, uint32_t tag, uint32_t index, int * emptySlot)}}
\par
{\bkmkstart AAAAAAAAAV}
{\bkmkend AAAAAAAAAV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Funcao que trata o miss \par
}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 144 \{\par
145     cache->stats.misses++;  {\cf20 // Incrementa o contador total de misses}\par
146 \par
147     CacheSet *set = &cache->sets[index]; {\cf20 // Pega o conjunto correspondente, com base no indice}\par
148     {\cf18 int} replaceIndex; {\cf20 // Indice do bloco que sera substituido}\par
149 \par
150     {\cf19 if} (*emptySlot != -1) {\cf20 // Se tiver um bloco invalido, usa ele (foi calculado no isHit)}\par
151     \{\par
152         replaceIndex = *emptySlot; {\cf20 // entao o bloco a ser substituido eh o bloco invalido}\par
153         cache->stats.compulsory++; {\cf20 // Incrementa o contador de misses compulsorios}\par
154     \}\par
155     {\cf19 else}\par
156     \{\par
157         replaceIndex = cache->replacementPolicy(set, cache->associativity); {\cf20 // Calcula o indice do bloco a ser substituido}\par
158 \par
159         {\cf19 if} (cacheIsFull(cache)) {\cf20 // Se a cache estiver cheia, eh um miss de capacidade}\par
160             cache->stats.capacity++;\par
161         {\cf19 else}                    {\cf20 // Se nao, eh um miss de conflito}\par
162             cache->stats.conflict++;\par
163     \}\par
164 \par
165     {\cf20 // Atualiza o bloco que sera substituido}\par
166     set->blocks[replaceIndex].valid = {\cf17 true};\par
167     set->blocks[replaceIndex].tag = tag;\par
168     set->blocks[replaceIndex].lastAccess = cache->stats.totalAccesses;\par
169     set->blocks[replaceIndex].insertionTime = cache->stats.totalAccesses;\par
170 \}\par
}
}
{\xe \v isHit\:cache.h}
{\xe \v cache.h\:isHit}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool isHit ({\b Cache} * cache, uint32_t tag, uint32_t index, int * emptySlot)}}
\par
{\bkmkstart AAAAAAAAAW}
{\bkmkend AAAAAAAAAW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Funcao para testar se o endereco eh um hit Retorna true caso seja, e false caso contrario \par
}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 123 \{\par
124     CacheSet *set = &cache->sets[index]; {\cf20 // Pega o conjunto correspondente, com base no indice}\par
125 \par
126     {\cf19 for} ({\cf18 int} i = 0; i < cache->associativity; i++)\par
127     \{\par
128         {\cf19 if} (set->blocks[i].valid && set->blocks[i].tag == tag) {\cf20 // compara pra ver se eh valido e a tag eh igual a tag calculada}\par
129         \{\par
130             set->blocks[i].lastAccess = cache->stats.totalAccesses; {\cf20 // Atualiza o tempo de acesso do bloco (LRU)}\par
131             {\cf19 return} {\cf17 true};                                            {\cf20 // Retorna true se for hit}\par
132         \}\par
133         {\cf19 if} (!set->blocks[i].valid && (*emptySlot) == -1)\par
134             *emptySlot = i;  {\cf20 // Atualiza o indice do bloco invalido}\par
135     \}\par
136 \par
137     {\cf19 return} {\cf17 false}; {\cf20 // Se nao achou nenhum bloco valido com a tag, entao nao eh hit}\par
138 \}\par
}
}
{\xe \v isPowerOfTwo\:cache.h}
{\xe \v cache.h\:isPowerOfTwo}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool isPowerOfTwo (const unsigned int value)}}
\par
{\bkmkstart AAAAAAAAAX}
{\bkmkend AAAAAAAAAX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
func pra ver se eh potencia de dois \par
}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 282 \{ {\cf19 return} (value != 0) && ((value & (value - 1)) == 0); \}\par
}
}
{\xe \v printStats\:cache.h}
{\xe \v cache.h\:printStats}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void printStats ({\b Cache} * cache, int flag)}}
\par
{\bkmkstart AAAAAAAAAY}
{\bkmkend AAAAAAAAAY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Func pra printar os stats conforme a flag \par
}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 254 \{\par
255     {\cf18 float} hitRate = (float)cache->stats.hits / cache->stats.totalAccesses;\par
256     {\cf18 float} missRate = (float)cache->stats.misses / cache->stats.totalAccesses;\par
257     {\cf18 float} compulsoryRate = (float)cache->stats.compulsory / cache->stats.misses;\par
258     {\cf18 float} capacityRate = (float)cache->stats.capacity / cache->stats.misses;\par
259     {\cf18 float} conflictRate = (float)cache->stats.conflict / cache->stats.misses;\par
260 \par
261     {\cf19 if} (flag == 0)\par
262     \{\par
263         printf({\cf22 "Total de acessos: %d\\n"}, cache->stats.totalAccesses);\par
264         printf({\cf22 "Total de hits: %d\\n"}, cache->stats.hits);\par
265         printf({\cf22 "Total de misses: %d\\n"}, cache->stats.misses);\par
266         printf({\cf22 "Taxa de hits: %.4f\\n"}, hitRate);\par
267         printf({\cf22 "Taxa de misses: %.4f\\n"}, missRate);\par
268         printf({\cf22 "Taxa de misses compuls\'F3rios: %.2f\\n"}, compulsoryRate);\par
269         printf({\cf22 "Taxa de misses de capacidade: %.2f\\n"}, capacityRate);\par
270         printf({\cf22 "Taxa de misses de conflito: %.2f\\n"}, conflictRate);\par
271     \}\par
272     {\cf19 else} {\cf19 if} (flag == 1)\par
273     \{\par
274         printf({\cf22 "%d %.4f %.4f %.2f %.2f %.2f\\n"}, cache->stats.totalAccesses, hitRate, missRate, compulsoryRate, capacityRate, conflictRate);\par
275     \}\par
276 \}\par
}
}
{\xe \v processAddress\:cache.h}
{\xe \v cache.h\:processAddress}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void processAddress ({\b Cache} * cache, const uint32_t address)}}
\par
{\bkmkstart AAAAAAAAAZ}
{\bkmkend AAAAAAAAAZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Func que processa o endereco \par
}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 177 \{\par
178     {\cf20 // calculo dos bits de offset e index com log2}\par
179     {\cf18 int} offsetBits = log2(cache->blockSize);\par
180     {\cf18 int} indexBits = log2(cache->numSets);\par
181     {\cf20 // Calculo da tag com base no pseudo codigo fornecido}\par
182     uint32_t tag = address >> (offsetBits + indexBits);\par
183     uint32_t index = (address >> offsetBits) & ((1 << indexBits) - 1);\par
184 \par
185     {\cf18 bool} hit = {\cf17 false};\par
186     {\cf18 int} emptySlot = -1;\par
187 \par
188     {\cf19 if} (isHit(cache, tag, index, &emptySlot) ) {\cf20 // se for hit incrementa o contador dos hits}\par
189         cache->stats.hits++;\par
190     {\cf19 else} {\cf20 // se nao, trata a falta}\par
191         handleCacheMiss(cache, tag, index, &emptySlot);\par
192 \par
193     cache->stats.totalAccesses++; {\cf20 // incrementa o total de acessos}\par
194 \}\par
}
}
{\xe \v readFile\:cache.h}
{\xe \v cache.h\:readFile}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void readFile ({\b Cache} * cache, const char * filename)}}
\par
{\bkmkstart AAAAAAAABA}
{\bkmkend AAAAAAAABA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
le o arquivo e processa os enderecos \par
}{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 100 \{\par
101     FILE *file = fopen(filename, {\cf22 "rb"});\par
102     {\cf19 if} (!file)\par
103     \{\par
104         printf({\cf22 "ERRO: N\'E3o foi poss\'EDvel abrir o arquivo %s\\n"}, filename);\par
105         {\cf19 return};\par
106     \}\par
107 \par
108     uint32_t address;\par
109     {\cf19 while} (fread(&address, {\cf17 sizeof}(uint32_t), 1, file) == 1)\par
110     \{\par
111         address = __builtin_bswap32(address); {\cf20 // converte para big endian}\par
112         processAddress(cache, address);       {\cf20 // processa o endereco}\par
113     \}\par
114 \par
115     fclose(file);\par
116 \}\par
}
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
cache.h\par \pard\plain 
{\bkmkstart AAAAAAAAAA}
{\bkmkend AAAAAAAAAA}
Ir para a documenta\'E7\'E3o desse arquivo.\par
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf21 #ifndef CACHE_H}\par
2 {\cf21 #define CACHE_H}\par
3 \par
4 {\cf21 #include <stdio.h>}\par
5 {\cf21 #include <stdbool.h>}\par
6 {\cf21 #include <stdlib.h>}\par
7 {\cf21 #include <time.h>}\par
8 {\cf21 #include <string.h>}\par
9 {\cf21 #include <math.h>}\par
10 {\cf21 #include <stdint.h>}\par
11 {\cf21 #include <ctype.h>}\par
12 \par
13 {\cf20 // cache_simulator <nsets> <bsize> <assoc> <substitui\'E7\'E3o> <flag_saida> arquivo_de_entrada}\par
14 \par
15 {\cf20 // Estruturas utilizadas}\par
16 {\cf20 // Estrutura para um bloco de cache}\par
17 {\cf17 typedef} {\cf17 struct }\{\par
18     {\cf18 bool} valid;\par
19     uint32_t tag;\par
20     {\cf20 //int *data;}\par
21     {\cf18 int} lastAccess;\par
22     {\cf18 int} insertionTime;\par
23 \} CacheBlock;\par
24 \par
25 {\cf20 // Estrutura para um conjunto de cache}\par
26 {\cf17 typedef} {\cf17 struct }\{\par
27     CacheBlock *blocks; {\cf20 // cada conjunto tem (ou pode ter) varios blocos}\par
28     {\cf18 int} numBlocks;\par
29 \} CacheSet;\par
30 \par
31 {\cf20 // Estrutura para estatisticas da cache}\par
32 {\cf17 typedef} {\cf17 struct }\{\par
33     {\cf18 int} hits;\par
34     {\cf18 int} misses;\par
35     {\cf18 int} compulsory;\par
36     {\cf18 int} capacity;\par
37     {\cf18 int} conflict;\par
38     {\cf18 int} totalAccesses;\par
39 \} CacheStats;\par
40 \par
41 {\cf20 // Estrutura principal da cache}\par
42 {\cf17 typedef} {\cf17 struct }\{\par
43     CacheSet *sets;\par
44     {\cf18 int} numSets;\par
45     {\cf18 int} blockSize;\par
46     {\cf18 int} associativity;\par
47     CacheStats stats;\par
48     int (*replacementPolicy)(CacheSet *set, {\cf18 int} associativity); {\cf20 // isso eh um ponteiro para uma funcao}\par
49     {\cf20 // a funcao retorna um inteiro que eh o indice do bloco que sera substituido}\par
50     {\cf20 // quando precisamos determinar qual bloco sera substituido, chamamos essa funcao apontada por replacementPolicy}\par
51 \} Cache;\par
52 {\cf20 //bool debug = true;}\par
53 \par
54 {\cf20 // Declaracao das funcoes utilizadas}\par
55 Cache* createCacheWithPolicy({\cf18 int} numSets, {\cf18 int} blockSize, {\cf18 int} associativity, {\cf18 char} policyChar);\par
56 {\cf18 void} freeCache(Cache *cache);\par
57 {\cf18 void} processAddress(Cache *cache, {\cf17 const} uint32_t address);\par
58 {\cf18 int} getLRUIndex(CacheSet *set, {\cf18 int} associativity);\par
59 {\cf18 int} getFIFOIndex(CacheSet *set, {\cf18 int} associativity);\par
60 {\cf18 int} getRandomIndex(CacheSet *set, {\cf18 int} associativity);\par
61 {\cf18 void} readFile(Cache *cache, {\cf17 const} {\cf18 char} *filename);\par
62 {\cf18 void} printStats(Cache *cache, {\cf17 const} {\cf18 int} flag);\par
63 {\cf18 bool} isPowerOfTwo({\cf18 unsigned} {\cf18 int} value);\par
64 {\cf18 bool} cacheIsFull(Cache *cache);\par
65 {\cf18 bool} isHit(Cache *cache, uint32_t tag, uint32_t index, {\cf18 int} *emptySlot);\par
66 {\cf18 void} handleCacheMiss(Cache *cache, uint32_t tag, uint32_t index, {\cf18 int} *emptySlot);\par
67 \par
68 {\cf21 #endif}\par
69 \par
70 \par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Arquivo cache_simulator.c\par \pard\plain 
{\tc\tcl2 \v cache_simulator.c}
{\xe \v cache_simulator.c}
{\bkmkstart AAAAAAAABB}
{\bkmkend AAAAAAAABB}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "cache.h"}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Fun\'E7\'F5es\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b main} (int argc, char *argv[])\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Fun\'E7\'F5es\par
\pard\plain 
{\xe \v main\:cache_simulator.c}
{\xe \v cache_simulator.c\:main}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int main (int argc, char * argv[])}}
\par
{\bkmkstart AAAAAAAABC}
{\bkmkend AAAAAAAABC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 4 \{\par
5     {\cf19 if} (argc != 7)\par
6     \{\par
7         printf({\cf22 "Uso: %s <nsets> <bsize> <assoc> <substitui\'E7\'E3o> <flag_saida> <arquivo_de_entrada>\\n"}, argv[0]);\par
8         {\cf19 return} 1;\par
9     \}\par
10 \par
11     {\cf18 int} nsets = atoi(argv[1]);\par
12     {\cf18 int} bsize = atoi(argv[2]);\par
13     {\cf18 int} assoc = atoi(argv[3]);\par
14     {\cf18 char} subst = argv[4][0];\par
15     {\cf18 int} flag = atoi(argv[5]);\par
16     {\cf18 char} *filename = argv[6];\par
17 \par
18     {\cf19 if} (!isPowerOfTwo(nsets) || !isPowerOfTwo(bsize))\par
19     \{\par
20         printf({\cf22 "ERRO: nsets e bsize devem ser pot\'EAncias de 2\\n"});\par
21         {\cf19 return} 1;\par
22     \}\par
23 \par
24     Cache *cache = createCacheWithPolicy(nsets, bsize, assoc, subst);\par
25     {\cf19 if} (cache == NULL)\par
26         {\cf19 return} 1;\par
27 \par
28     readFile(cache, filename);\par
29     printStats(cache, flag);\par
30     freeCache(cache);\par
31 \par
32     {\cf19 return} 0;\par
33 \}\par
}
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Refer\'EAncia do Arquivo README.md\par \pard\plain 
{\tc\tcl2 \v README.md}
{\xe \v README.md}
{\bkmkstart AAAAAAAABD}
{\bkmkend AAAAAAAABD}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid Sum\'E1rio\par 
\pard\plain 
{\tc \v Sum\'E1rio}
{\field\fldedit {\*\fldinst INDEX \\c2 \\*MERGEFORMAT}{\fldrslt INDEX}}
}
